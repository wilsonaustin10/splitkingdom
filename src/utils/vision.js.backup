const vision = require('@google-cloud/vision');
const path = require('path');

// Initialize the client with the correct authentication
const client = new vision.ImageAnnotatorClient({
  keyFilename: path.join(__dirname, '../../config/document-ai-servicekey.json')
});

console.log('Vision API Client initialization path:', path.join(__dirname, '../../config/document-ai-servicekey.json'));
console.log('Vision API Client initialized:', !!client);

/**
 * Parses a receipt image using Google Vision Document AI
 * @param {string} imagePath - Path to the receipt image
 * @returns {Promise<Object>} - Parsed receipt data
 */
const parseReceipt = async (imagePath) => {
  try {
    console.log('Attempting to parse receipt:', imagePath);
    
    // Perform text detection on the image
    const [result] = await client.documentTextDetection(imagePath);
    
    if (!result || !result.fullTextAnnotation) {
      throw new Error('No text detected in image');
    }
    
    const fullText = result.fullTextAnnotation.text;
    console.log('Detected text:', fullText);
    
    // Initialize parsed data
    const parsedData = {
      items: [],
      total_amount: 0,
      tax: 0,
    };

    // Split text into lines
    const lines = fullText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    console.log('Parsed Lines:', lines);

    // Regex patterns
    const priceRegex = /\$?(\d+\.\d{2})$/;
    const totalRegex = /^TOTAL$/i;
    const taxRegex = /^TAX$/i;

    lines.forEach(line => {
      const priceMatch = line.match(priceRegex);
      if (priceMatch) {
        const price = parseFloat(priceMatch[1]);

        if (totalRegex.test(line)) {
          parsedData.total_amount = price;
        } else if (taxRegex.test(line)) {
          parsedData.tax = price;
        } else {
          // Assume the rest of the line is the item name
          const itemName = line.replace(priceRegex, '').trim();
          if (itemName.length > 0) {
            parsedData.items.push({
              name: itemName,
              price: price,
              category: 'Uncategorized', // Placeholder, can be enhanced
            });
          }
        }
      }
    });

    console.log('Parsed Data:', parsedData);
    return parsedData;
    
  } catch (error) {
    console.error('Error parsing receipt:', error);
    throw error;
  }
};

module.exports = { parseReceipt }; 